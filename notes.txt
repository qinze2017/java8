pom.xml :

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
	
Add Comments :

File-->settings-->Editor-->File and Code Templates-->Files

Choose Class

/**
 * #author:${USER}
 *
 * @date:${DATE}
 * @description:
 **/

Git remove old origin :
git add .
git status
git commit -m "xxx"
git remote rm origin
git remote add origin xxx.git
git push -u origin master

To check out master branch :
git checkout master
Overwrite "master" with new_branch :
git reset --hard new_branch
Force the push to your remote repository :
git push -f origin master

Test Memory usage :
>> jps -l
>> jstat -gcutil XXXX 1000 10

Tool JConsole to verify thread and process

@FunctionalInterface Functional Interface could have default and static, but have only one method.  

parameter list       arrow       lambda body
 (o1, o2)            ->          o1.getColor().compareTo(o2.getColor())
 
 Consumer, Function, Predicate, Supplier, BiFunction, DoubleBinaryOperator, Streams(Spliterator), 
 Comparator, Collectors, Sink, Ops, Fork join
 
 Function : 
 
 Function<String, Integer> flambda = s -> s.length();
 Fucntion<Apple, Boolean> f = (a) -> a.getColor().equals("green");
 
 Predicate : 
 
 Predicate<Apple> p = (Apple a) -> a.getColor().equals("green");
 
 Supplier :
 
 Supplier<Apple> s = Apple::new;

 
 @FunctionalInterface
 public interface Test {
    public void fun(int x, int y);
 }
 
		(int x, int y) -> {
            System.out.println(x);
            System.out.println(y);
        };
 
public interface Test {
	public void fun();
}

() -> 88

(parameters) -> expression
(parameters) -> {statements;}
() -> {}
() -> ""
() -> {return "";}

How to find the src.zip and show in the Intellij IDEA :
File -> Project Structure -> SDKs 
Add jdk\lib\src.zip to the Classpath
Ctrl+N to check Class and its path
Click "Scroll from source" to check the source directly

Predicate boolean test(T t); BiPredicate, IntPredicate(int), LongPredicate, DoublePredicate 

Consumer accept(T t);

Function<T,R> R apply(T t); IntFunction, BiFunction

Supplier<T> T get();

Comparator :
1.
list.sort(new Comparator<Apple> {
	public void compare(Apple o1, Apple o2){
		return o1.getColor().compareTo(o2.getColor());
	}
});
2.
list.sort((a1,a2) -> a1.getColor().compareTo(a2.getColor()));
3.
list.sort(Comparator.comparing(Apple:getColor));

Streams : collections, I/O, etc
Sequence of elements: Dish
Source: menu
Data processing operations: filter, map, sorted, limit, collect
Pipelining(Lazy construction, short-circuiting), Internal iteration

Intermediate operations: distinct, sorted, peek, filter, map, limit, mapToInt, skip, anyMatch, allMatch, noneMatch, findFirst, findAny, builder, empty, of, max, min, reduce, collect, count
Terminal oprations: forEach, forEachOrdered, collect

Filtering, slicing, matching

